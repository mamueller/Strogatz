#!/usr/bin/python
from sympy.interactive.printing import init_printing
init_printing(use_unicode=True, wrap_line=False, no_global=True)
from sympy.matrices import *
from sympy.matrices.matrices import exp_block
from sympy.matrices.matrices import jblock_exponential
from sympy import Symbol,exp,factorial
from sympy import latex
import re
from sympy import symbols
from sympy import simplify
from sympy import Basic, Symbol, Integer, C, S, Dummy, Rational, Add, Pow

def ml(ex):
    st=latex(ex)
    st=re.sub("smallmatrix","matrix",st)
    st=re.sub("left\[","left(",st)
    st=re.sub("right\]","right)",st)
    return(st) 

def exampleFromMatrix(m):
    Text="\
          consider the following matrix \n\
          \[\n \mathbf{M}="\
          +ml(m)\
          +"\\]"  
    
    l=m.eigenvects()
    e1=l[0][2][0]
    e2=l[1][2][0]
    lambda1=l[0][0]
    lambda2=l[1][0]
    Text+="\
          We compute the eigenvalues and the eigenvalues there multiplicity and the eigenvectors:\n\
          \[\n"\
          +latex(m.eigenvects())\
	  +"\\]" 
    Text+="\
          In detail this means:\n\
          \[\n"\
	  +"\lambda_1="\
          +latex(lambda1)\
	  +"\hspace{1cm}"\
	  +"\lambda_2="\
          +latex(lambda2)\
	  +"\\]"\
          +"\[\n"\
	  +"\mathbf{e_1}="\
          +latex(e1)\
	  +"\hspace{1cm}"\
	  +"\mathbf{e_2}="\
          +latex(e2)\
	  +"\\]" 

    c_1,c_2=symbols("c_1,c_2")
    x,y=symbols("x,y")
    X=Matrix([x,y])
    gs=c_1*exp(lambda1)*e1+c_2*exp(lambda2)*e2
    Text+="\
          So the general solution is:\n"\
	  +"\\begin{eqnarray}\n"\
          +"\mathbf{x}(t)="+latex(X)+"&=&c_1 e^{\lambda_1 t}\mathbf{e_1}+c_2 e^{\lambda_2 t}\mathbf{e_2} \\nonumber \\\\"\
          +"&=&"+latex(gs)+"\\text{ with } c_1,c_2 \in \mathbb{C} \\nonumber \\\\"\
	  +"\\end{eqnarray}\n"

    Text+="\
          Remark:\\\\ \
          These two complex constants actually translate into  four real ones, since $c_1$ and $c_2$ both have a real and an imaginary part.\n\
	  \\\\ \
	  We can also look at it the other way round: From a more general point of view our two real intitial conditions are actually complex ones with an imaginary part of zero.\
	  Either way four constants to fullfill four conditions look promising.\n\
	  Remark:\\\\ \
	  Any two dimensional vectorspace can (by definition) be spanned by 2 lineary independent vectors.\
	  Any such set is called a base of the vectorspace. \
	  To switch to another one one is free to  create new base vectors as linear combinations of the old ones.\
	  For convinience we would like to have a real base vectors. (We do not loose generality by this choice since we \
	  can still multiply them with complex coeffients to regain the complex solutions)\
	  Remark:\\\\ \
	  Actually in our case of conjugate eigenvectors it is very easy to create an new (real only) base.\
	  We will proceed to do so right now."

#    Text+="\
#          \[\n \mathbf{f_1}="
#          +ml(P) \
#          +"\\]" 
#    
#    print P*J*P.inv()    
#    (P,J,cells)=m.jordan_cells()
#    Text+="\
#          There are the following blocks:\
#          \[\n bl=\left\{"
#    for c in cells:      
#          Text+=ml(c)
#    Text+="\\right\}\\]" 
#    
#    Text+="\
#          the products wiht t:\
#          \[\n tbl=\left\{"
#    for c in cells:      
#          Text+=ml(c*t)
#    Text+="\\right\}\\]" 
#    e_cells=[]
#    Text+="\
#          and the exponentials of the products:\
#          \[\n tblexp=\left\{"
#    for c in cells:  
#          e_cell=jblock_exponential(c*t)
#          e_cells.append(e_cell)
#          Text+=ml(jblock_exponential(c*t))
#    Text+="\\right\}\\]" 
#    
#    
#    eJ=diag(* e_cells)
#    Text+="\
#          Now we assemble $e^J$ from the exponetials of the blocks. Beside the big one there are two ohters which have only size 1.  If we order them from big to small we get:\n\
#          \[\n e^{\mathbf{Jt}}="\
#          +ml(eJ)\
#          +"\\]" 
#    
#    eA=P*eJ*P.inv()
#    Text+="\
#          To arrive at the final result we have to transform back to the original base  and eventually get:\n\
#       \\begin{eqnarray*}\n\
#          e^{\mathbf{A}t} 	&=&	\mathbf{P} e^{\mathbf{Jt}} \mathbf{P}^{-1}\\\\\
#          			&=&"+ml(eA)\
#    	 +"\end{eqnarray*}" 
#    
#    Text+="which is the matrix exponential of $\mathbf{A}t$."
#    n=m.rows
#    c=zeros(n,1)
#    for i in range(n):
#       c[i,0]=Symbol(("c0"+str(i+1)))
#    
#    anls=eA*c
#    Text+="The analytical solution is then given by \\[ e^{\mathbf{A}t} \mathbf{c0}\
#          ="\
#          +ml(anls)\
#          +"\\]\
#          with the vector of the initial concentration \[\n \mathbf{c0}="\
#          +ml(c)\
#          +"\\]"
#    #for i in range(n):
#    #    print anls[i,0]
    return(Text)


t= Symbol("t")
t0= Symbol("t0")
k1= Symbol("k1")
k2= Symbol("k2")
k3= Symbol("k3")
a21=Symbol("a21")
a32=Symbol("a32")
#m=  Matrix(3,3,
#    [
#         k1,   0,  0, 
#        a21,  k2,  0,   
#          0, a32, k3    
#	])
#
#m=  Matrix(2,2,
#    [
#         k1,   0,  
#        a21,  k2    
#    ])
m= Matrix(2,2,
    [
         1,-1, 
         1, 1   
	])
Text=exampleFromMatrix(m)
A=m*t
EX=(A).exp()
    
#EX_back=EX.subs([[k1,-1],[k2,-2],[k3,-2],[a21,1],[a32,1]])
#print EX_back
#print (m2*t).exp()
f=open("example.tex","w")
f.write(Text)
f.close()

